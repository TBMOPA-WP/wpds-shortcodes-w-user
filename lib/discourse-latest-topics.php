<?php

namespace WPDiscourse\LatestTopics;

use WPDiscourse\Utilities\Utilities as DiscourseUtilities;

class LatestTopics {

	protected $option_key = 'dclt_options';

	protected $options;

	protected $discourse_url;

	protected $refresh_topics = false;

	protected $dclt_options = array(
		'dclt_cache_duration' => 10,
		'dclt_webhook_refresh' => 0,
		'dclt_webhook_secret' => '',
		'dclt_clear_topics_cache' => 1,
		'dclt_use_default_styles' => 1,
	);

	public function __construct() {
		add_action( 'init', array( $this, 'initialize_plugin' ) );
		add_filter( 'wpdc_utilities_options_array', array( $this, 'add_options' ) );
		add_action( 'rest_api_init', array( $this, 'initialize_topic_route' ) );
		add_action( 'wp_enqueue_scripts', array( $this, 'plugin_scripts' ) );
	}

	public function initialize_plugin() {
		add_option( 'dclt_options', $this->dclt_options );
		$this->options = DiscourseUtilities::get_options();
		$this->discourse_url = ! empty( $this->options['url'] ) ? $this->options['url'] : null;
	}

	public function plugin_scripts() {
		if ( ! empty( $this->options['dclt_use_default_styles'] ) && 1 === intval( $this->options['dclt_use_default_styles'] ) ) {
			wp_register_style( 'dclt_styles', plugins_url( '/css/styles.css', __FILE__ ) );
			wp_enqueue_style( 'dclt_styles' );
		}
	}

	public function add_options( $wpdc_options ) {
		static $merged_options = [];

		if ( empty( $merged_options ) ) {
			$added_options = get_option( $this->option_key );
			if ( is_array( $added_options ) ) {
				$merged_options = array_merge( $wpdc_options, $added_options );
			} else {
				$merged_options = $wpdc_options;
			}
		}

		return $merged_options;
	}

	public function initialize_topic_route() {
		register_rest_route( 'wp-discourse/v1', 'latest-topics', array(
			'methods'  => 'POST',
			'callback' => array( $this, 'latest_topics' ),
		) );
	}

	public function latest_topics( $data ) {
		$data = $this->verify_discourse_request( $data );

		if ( is_wp_error( $data )) {
			error_log( $data->get_error_message());

			return null;
		}

		$this->refresh_topics = true;
	}

	protected function verify_discourse_request( $data ) {
		// The X-Discourse-Event-Signature consists of 'sha256=' . hamc of raw payload.
		// It is generated by computing `hash_hmac( 'sha256', $payload, $secret )`
		if ( $sig = substr( $data->get_header( 'X-Discourse-Event-Signature' ), 7 ) ) {
			$payload = $data->get_body();
			// Key used for verifying the request - a matching key needs to be set on the Discourse webhook.
			$secret  = 'thisisfortesting';
			if ( $sig === hash_hmac( 'sha256', $payload, $secret ) ) {

				return $data;
			} else {

				return new \WP_Error( 'Authentication Failed', 'Discourse Webhook Request Error: signatures did not match.' );
			}
		} else {
			return new \WP_Error( 'Access Denied', 'Discourse Webhook Request Error: the X-Discourse-Event-Signature was not set for the request.' );
		}
	}

	/**
	 * Get the latest topics from Discourse.
	 *
	 * @param int|string $cache_duration The cache duration for the topics.
	 * @param bool $force Whether to force retrieving new topics from Discourse.
	 *
	 * @return array|mixed|null|object
	 */
	public function get_latest_topics( $cache_duration, $force ) {
		$latest_url = esc_url_raw( $this->discourse_url . '/latest.json' );

		$discourse_topics = get_transient( 'dclt_latest_topics' );
		if ( empty( $discourse_topics ) || $force || $this->refresh_topics ) {

			$remote = wp_remote_get( $latest_url );
			if ( ! DiscourseUtilities::validate( $remote ) ) {

				return null;
			}

			$discourse_topics = json_decode( wp_remote_retrieve_body( $remote ), true );
			set_transient( 'dclt_latest_topics', $discourse_topics, $cache_duration * MINUTE_IN_SECONDS );
		}

		return $discourse_topics;
	}

	protected function update_latest_topics() {
		if ( empty( $this->discourse_url ) ) {

			return null;
		}

		$latest_url = esc_url( $this->discourse_url . '/latest.json' );

		$remote = wp_remote_get( $latest_url );

		if ( ! DiscourseUtilities::validate( $remote ) ) {

			return null;
		}

		$discourse_topics = json_decode( wp_remote_retrieve_body( $remote ), true );

	}

}